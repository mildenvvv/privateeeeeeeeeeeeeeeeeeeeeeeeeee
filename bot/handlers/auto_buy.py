from aiogram import types, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from api.gifts import GiftsApi
from bot.states.auto_buy_state import AutoBuyStates
from bot.keyboards.default import main_menu, auto_buy_keyboard, go_back_menu, back_to_auto_buy_settings_menu_keyboard
from utils.logger import log
from db.models import AutoBuySettings, User

router = Router()
gifts_api = GiftsApi()


def get_or_create_auto_buy_settings(db, user_id) -> AutoBuySettings:
    settings = db.query(AutoBuySettings).filter(
        AutoBuySettings.user_id == user_id).first()
    if not settings:
        settings = AutoBuySettings(user_id=user_id)
        db.add(settings)
        db.commit()
        db.refresh(settings)
    return settings


@router.message(Command(commands=["auto_buy"]))
async def auto_buy_command(message: types.Message, state: FSMContext, db_session):
    with db_session as db:
        settings = get_or_create_auto_buy_settings(db, message.from_user.id)
        user = db.query(User).filter(
            User.user_id == message.from_user.id).first()

        username = user.username if user else "Unknown User"
        balance = user.balance if user else 0

        await message.answer(
            text=(
                f"{username}! –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠êÔ∏è\n\n"
                f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–≤—Ç–æ-–ü–æ–∫—É–ø–∫–∏</b>\n"
                f"–°—Ç–∞—Ç—É—Å: {'üü¢ –í–∫–ª—é—á–µ–Ω–æ' if settings.status == 'enabled' else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
                f"<b>–¶–µ–Ω–∞:</b>\n"
                f"–û—Ç {settings.price_limit_from} –¥–æ {settings.price_limit_to} ‚≠êÔ∏è\n\n"
                f"<b>–õ–∏–º–∏—Ç —Å–∞–ø–ª–∞—è:</b> {settings.supply_limit or '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ'} ‚≠êÔ∏è\n"
                f"<b>–¶–∏–∫–ª—ã –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏:</b> {settings.cycles}\n"
            ),
            reply_markup=auto_buy_keyboard(),
            parse_mode="HTML"
        )
    await state.set_state(AutoBuyStates.menu)


async def display_updated_settings(message: types.Message, db_session, settings: AutoBuySettings) -> None:
    with db_session as db:
        user = db.query(User).filter(
            User.user_id == message.from_user.id).first()
        username = user.username if user else "Unknown User"
        balance = user.balance if user else 0
        db.refresh(settings)

        await message.answer(
            text=(
                f"{username}! –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} ‚≠êÔ∏è\n\n"
                f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ê–≤—Ç–æ-–ü–æ–∫—É–ø–∫–∏</b>\n"
                f"–°—Ç–∞—Ç—É—Å: {'üü¢ –í–∫–ª—é—á–µ–Ω–æ' if settings.status == 'enabled' else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ'}\n\n"
                f"<b>–¶–µ–Ω–∞:</b>\n"
                f"–û—Ç {settings.price_limit_from} –¥–æ {settings.price_limit_to} ‚≠êÔ∏è\n\n"
                f"<b>–õ–∏–º–∏—Ç —Å–∞–ø–ª–∞—è:</b> {settings.supply_limit or '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ'} ‚≠êÔ∏è\n"
                f"<b>–¶–∏–∫–ª—ã –ê–≤—Ç–æ–ø–æ–∫—É–ø–∫–∏:</b> {settings.cycles}"
            ),
            reply_markup=auto_buy_keyboard(),
            parse_mode="HTML"
        )


@router.message(StateFilter(AutoBuyStates.menu))
async def auto_buy_menu_handler(message: types.Message, state: FSMContext, db_session):
    with db_session as db:
        settings = get_or_create_auto_buy_settings(db, message.from_user.id)

        if message.text == "üîÑ –í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å":
            settings.status = "enabled" if settings.status == "disabled" else "disabled"
            db.commit()
            db.refresh(settings)
            await message.answer(
                text=f"üîÑ –°—Ç–∞—Ç—É—Å –ê–≤—Ç–æ-–ü–æ–∫—É–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω: {'üü¢ –í–∫–ª—é—á–µ–Ω–æ' if settings.status == 'enabled' else 'üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ'}."
            )
            await display_updated_settings(message, db_session, settings)

        elif message.text == "‚úèÔ∏è –õ–∏–º–∏—Ç —Ü–µ–Ω—ã –û—Ç/–î–æ":
            await message.answer(
                # –ò–∑–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                text="–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —Ü–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–û—Ç/–î–æ` (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 100).\n–ù–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.",
                reply_markup=back_to_auto_buy_settings_menu_keyboard(),
                parse_mode="HTML"
            )
            await state.set_state(AutoBuyStates.set_price)

        elif message.text == "‚úèÔ∏è –õ–∏–º–∏—Ç —Å–∞–ø–ª–∞—è":
            await message.answer(
                # –ò–∑–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                text="–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —Å–∞–ø–ª–∞—è –ø–æ–¥–∞—Ä–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50).\n–ù–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.",
                reply_markup=back_to_auto_buy_settings_menu_keyboard(),
                parse_mode="HTML"
            )
            await state.set_state(AutoBuyStates.set_supply)

        elif message.text == "‚úèÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¶–∏–∫–ª–æ–≤":
            await message.answer(
                # –ò–∑–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                text="<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2)</b>\n–ö–∞–∂–¥—ã–π —Ü–∏–∫–ª –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 —Ü–∏–∫–ª–∞ —Å 2 –ø–æ–¥–∞—Ä–∫–∞–º–∏ –∑–∞ —Ü–∏–∫–ª –∫—É–ø—è—Ç 6 –ø–æ–¥–∞—Ä–∫–æ–≤ –≤—Å–µ–≥–æ).\n–ù–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥', —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.",
                reply_markup=back_to_auto_buy_settings_menu_keyboard(),
                parse_mode="HTML"
            )
            await state.set_state(AutoBuyStates.set_cycles)

        elif message.text == "üîô –ù–∞–∑–∞–¥ –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é":
            await message.answer(
                text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
                reply_markup=main_menu()
            )
            await state.clear()


@router.message(StateFilter(AutoBuyStates.set_price))
async def auto_buy_set_price_handler(message: types.Message, state: FSMContext, db_session):
    with db_session as db:
        settings = get_or_create_auto_buy_settings(db, message.from_user.id)

        # –ò–∑–º–µ–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        if message.text == "üîô –ù–∞–∑–∞–¥":
            await display_updated_settings(message, db_session, settings)
            await state.set_state(AutoBuyStates.menu)
            return

        try:
            price_limits = message.text.split()
            if len(price_limits) != 2:
                raise ValueError("–í–≤–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: `–û—Ç/–î–æ`.")
            price_from, price_to = map(int, price_limits)
            settings.price_limit_from = price_from
            settings.price_limit_to = price_to
            db.commit()
            db.refresh(settings)

            await message.answer(
                text=f"‚úÖ –õ–∏–º–∏—Ç —Ü–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –æ—Ç {price_from} –¥–æ {price_to} ‚≠êÔ∏è."
            )
            await display_updated_settings(message, db_session, settings)
            await state.set_state(AutoBuyStates.menu)
        except ValueError:
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–¥–µ—Å—å —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å back_to_auto_buy_settings_menu_keyboard
            await message.answer(
                text="–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç —Ü–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–û—Ç/–î–æ` (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 100).",
                reply_markup=back_to_auto_buy_settings_menu_keyboard() # –ò–∑–º–µ–Ω–µ–Ω–æ
            )

@router.message(StateFilter(AutoBuyStates.set_supply))
async def auto_buy_set_supply_handler(message: types.Message, state: FSMContext, db_session):
    with db_session as db:
        settings = get_or_create_auto_buy_settings(db, message.from_user.id)

        # –ò–∑–º–µ–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        if message.text == "üîô –ù–∞–∑–∞–¥":
            await display_updated_settings(message, db_session, settings)
            await state.set_state(AutoBuyStates.menu)
            return

        try:
            supply_limit = int(message.text)
            if supply_limit <= 0:
                raise ValueError("–õ–∏–º–∏—Ç —Å–∞–ø–ª–∞—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            settings.supply_limit = supply_limit
            db.commit()
            db.refresh(settings)

            await message.answer(
                text=f"‚úÖ –õ–∏–º–∏—Ç —Å–∞–ø–ª–∞—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {supply_limit}."
            )
            await display_updated_settings(message, db_session, settings)
            await state.set_state(AutoBuyStates.menu)
        except ValueError:
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–¥–µ—Å—å —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å back_to_auto_buy_settings_menu_keyboard
            await message.answer(
                text="–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ —Å–∞–ø–ª–∞—è.",
                reply_markup=back_to_auto_buy_settings_menu_keyboard() # –ò–∑–º–µ–Ω–µ–Ω–æ
            )

@router.message(StateFilter(AutoBuyStates.set_cycles))
async def auto_buy_set_cycles_handler(message: types.Message, state: FSMContext, db_session):
    with db_session as db:
        settings = get_or_create_auto_buy_settings(db, message.from_user.id)

        # –ò–∑–º–µ–Ω–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        if message.text == "üîô –ù–∞–∑–∞–¥":
            await display_updated_settings(message, db_session, settings)
            await state.set_state(AutoBuyStates.menu)
            return

        try:
            cycles = int(message.text)
            if cycles <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
            settings.cycles = cycles
            db.commit()
            db.refresh(settings)

            await message.answer(
                text=f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –ø–æ–∫—É–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {cycles}."
            )
            await display_updated_settings(message, db_session, settings)
            await state.set_state(AutoBuyStates.menu)
        except ValueError:
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–¥–µ—Å—å —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å back_to_auto_buy_settings_menu_keyboard
            await message.answer(
                text="–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏–∫–ª–æ–≤.",
                reply_markup=back_to_auto_buy_settings_menu_keyboard() # –ò–∑–º–µ–Ω–µ–Ω–æ
            )